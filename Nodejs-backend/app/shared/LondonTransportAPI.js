"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request-promise");
const logger_1 = require("./logger");
class LondonTransportAPI {
    constructor() {
        this.defaultURL = "https://api.tfl.gov.uk/";
        this.appID = "64cafb9b";
        this.key = "1824212fb2a19279eb460255ba35966c";
    }
    getBusLineStations(lineID) {
        return new Promise((resolve, reject) => {
            let url = this.defaultURL + "line/" + lineID + "/StopPoints/";
            let opts = {
                uri: url,
                method: 'GET',
                qs: {
                    app_id: this.appID,
                    app_key: this.key
                }
            };
            request(opts).then((result) => {
                //console.log("Got response from London Transport API: " + result);
                if (result) {
                    let data = JSON.parse(result);
                    if (data.length > 0) {
                        let stationsData = [];
                        for (let station of data) {
                            stationsData.push({
                                id: station.id,
                                name: station.commonName
                            });
                        }
                        resolve(stationsData);
                    }
                }
                else {
                    logger_1.Logger.log("Can not get bus line stations info from API");
                    reject("Can not get bus line stations info from API");
                }
            }).catch(err => {
                logger_1.Logger.log("London Transport API error: ", err);
                reject(err);
            });
        });
    }
    getStationTimeTable(lineID, stationID) {
        return new Promise((resolve, reject) => {
            let url = this.defaultURL + "line/" + lineID + "/Timetable/" + stationID;
            let opts = {
                uri: url,
                method: 'GET',
                qs: {
                    app_id: this.appID,
                    app_key: this.key
                }
            };
            request(opts).then((result) => {
                //console.log("Got time table response from London Transport API: " + result);
                if (result) {
                    let data = JSON.parse(result);
                    //console.log("Got time table response from London Transport API: ", data);
                    if (data.timetable && data.timetable.routes && data.timetable.routes.length === 1) {
                        if (data.timetable.routes[0].schedules && data.timetable.routes[0].schedules.length > 0) {
                            let timeTableData = [];
                            for (let schedule of data.timetable.routes[0].schedules) {
                                let lastHour = (Number(schedule.lastJourney.hour) % 24) + "";
                                let busSchedule = {
                                    date: schedule.name,
                                    first: schedule.firstJourney.hour + ":" + schedule.firstJourney.minute,
                                    last: lastHour + ":" + schedule.lastJourney.minute
                                };
                                timeTableData.push(busSchedule);
                            } //for
                            resolve(timeTableData);
                        }
                        else {
                            logger_1.Logger.log("Bus line stations time table data error");
                            reject("Bus line stations time table data error");
                        }
                    }
                    else {
                        logger_1.Logger.log("Bus line stations time table data error");
                        reject("Bus line stations time table data error");
                    }
                }
                else {
                    logger_1.Logger.log("Can not get bus line stations time table info from API");
                    reject("Can not get bus line stations time table info from API");
                }
            }).catch(err => {
                logger_1.Logger.log("London Transport API error: ", err);
                reject(err);
            });
        });
    }
}
exports.LondonTransportAPI = LondonTransportAPI;
//# sourceMappingURL=data:application/json;base64,